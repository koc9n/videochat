<!DOCTYPE html>
<html>
  <head>
    <title>Social Chat</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/vendor/ngToast/ngToast.css">
    <link rel="stylesheet" href="/styles/angular-csp.css">
    <link rel="stylesheet" href="/styles/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/chat.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body ng-app="ChatApp">
  <header ng-controller="HeaderCtrl" class="header modal-header navbar-inverse">
    <div class="container">
      <!-- Brand and toggle get grouped for better mobile display -->
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse"
                data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" ng-href="#/">Social Chat</a>
      </div>

      <!-- Collect the nav links, forms, and other content for toggling -->
      <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
        <ul ng-if="authenticated" class="nav navbar-nav">

          <li><a href="#/chat">Chat room</a></li>

        </ul>
        <ul class="nav navbar-nav navbar-right">

          <li ng-if="authenticated == false"><a href="#/login">Sign in</a></li>
          <li ng-if="authenticated == false"><a href="#/register">Sign up</a></li>
          <li ng-if="authenticated"><a href="#/logout">Sign out</a></li>

        </ul>
      </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
  </header>

    <%- body %>

  <footer class="footer panel-footer">
    <div class="container">
      <img class="foologo" src="" alt=""/>
      <p>Site is powered by Konstantin Mironchik. All rigths reserved.</p>
    </div>
  </footer>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/vendor/jquery/jquery.js"></script>
    <script src="/vendor/bootstrap/bootstrap.js"></script>
    <script src="/vendor/angular/angular.js"></script>
    <script src="/vendor/angular-cookies/angular-cookies.js"></script>
    <script src="/vendor/angular-route/angular-route.js"></script>
    <script src="/vendor/angular-sanitize/angular-sanitize.js"></script>
    <script src="/vendor/ngToast/ngToast.js"></script>
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/angularApp/app.js"></script>
    <script src="/js/angularApp/controller/ChatCtrl.js"></script>
    <script src="/js/angularApp/controller/HeaderCtrl.js"></script>
    <script src="/js/angularApp/controller/HomeCtrl.js"></script>
    <script src="/js/angularApp/controller/LoginCtrl.js"></script>
    <script src="/js/angularApp/controller/LogoutCtrl.js"></script>
    <script src="/js/angularApp/controller/RegisterCtrl.js"></script>
    <script src="/js/angularApp/directive/ChatDirective.js"></script>
    <script src="/js/angularApp/service/CookieSrvc.js"></script>
    <script src="/js/angularApp/service/HttpSrvc.js"></script>
    <script src="/js/angularApp/service/ToasterSrvc.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
